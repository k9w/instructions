	$Id: cvs_notes,v 1.11 2019/09/28 23:03:14 kevin Exp $

originally started 08-29-19

cd ~/k9w
cvs -d $PWD init

cd ~/bin/learn
cvs -d $OLDPWD import -m "Initial import from RCS project" learn k9w start
N learn/rcs_notes
N learn/cvs_notes
cvs import: Importing /home/kevin/k9w/learn/www.shellscript.sh
N learn/www.shellscript.sh/first.sh,v
N learn/www.shellscript.sh/for.sh,v
N learn/www.shellscript.sh/test.sh,v
N learn/www.shellscript.sh/var.sh,v
N learn/www.shellscript.sh/while.sh,v
N learn/www.shellscript.sh/test.sh

No conflicts created by this import

             
cd ..
mv learn learn.orig
cvs -qd ~/k9w checkout -P learn
U learn/cvs_notes
U learn/rcs_notes
U learn/www.shellscript.sh/first.sh,v
U learn/www.shellscript.sh/for.sh,v
U learn/www.shellscript.sh/test.sh
U learn/www.shellscript.sh/test.sh,v
U learn/www.shellscript.sh/var.sh,v
U learn/www.shellscript.sh/while.sh,v


# diff changes on cvs_notes

# incorporate RCS history into CVS where I used RCS

# diff changes on shellscript.sh examples that I tracked with RCS,
with revisions done after the import into CVS, and with the current
version in the source repository and working directory.

# continue working the tutorial at Functions

# try out and learn the rest of the CVS commands and document them here


--------
09-26


Now that I have learned and used CVS a bit, I am ready to start using
Subversion. I discovered I needed to rename my repository and working
directory to clearly show which repo and working directory is managed
by CVS, and which will be managed by SVN.

First I committed any changes left in my currently checked out copy of
~/k9w/learn. Then I renamed the repo 'k9w' and module 'learn'.

cd ~
mv k9w k9w-cvs
cd k9w-cvs
mv learn learn-cvs

Then I checked out a fresh copy of learn-cvs from ~/k9w-cvs

cd ~/bin
cvs -d ~/k9w-cvs checkout learn-cvs

Then I told cvs I was abandoning my checkout of 'learn'.

cd ~/bin/learn
cvs -d ~/k9w-cvs release

Then I deleted 'learn', now that it had been replaced by learn-cvs.

cd ~/bin
rm -r learn

That is how to rename a repo and module in CVS.

Now I can create a new SVN repo and project (like module), documented
in that project.

To revert my current checkout from Sep 28 2019 to the state it was in
on Sep 15:
cvs -d ~/k9w-cvs checkout -D "9/15/19" learn-cvs

To revert it to a month ago:
cvs -d ~/k9w-cvs checkout -D "1 month ago" learn-cvs

I tested this with a checkout of learn-cvs to ~/src instead of my main
woring copy in ~/bin. No cvs release was necessary. Checking out an
older version succesfully removed files that had been created later
with the phrase "is no longer in the repository" because it was
reverting the working copy back to a time before those files existed.

TODO:

Learn how to use `cvs checkout -j' and 'cvs update -j' to reconcile
the differences in file conflicts. If I conscientiously commit each
change I make, this problem would only come up in multi-developer
situations.

If cvs update or cvs commit reports a conflict where it could not
merge my local changes successfully with the version committed after
my latest checkout or update to this working copy, then here is how to
resolve the conflicting changes.

From error:
C conflicts occured

do
cvs update -j1.5 -j1.3 foo.c

or
cvs update -jTAG:DATE

or do
cvs update -C
this will overwrite the local copy with clean version from the repo
and save my local copy in '.#file.revision' Then merge or edit the
files by hand and then do 'cvs commit'

Need to test these todo commands.
