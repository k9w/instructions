started 12-28-20


TAR

Create archive in temp with todays date and time compressed with gzip
from all files and directories in ./instructions.
$ tar czf /tmp/$(date +%Y%m%d-%H:%M).tar.gz instructions

List the contents of the archive. Be sure to escape the colon with a
backslash to avoid interference from shell interpretation.
$ tar tzf /tmp/20201228-02\:28.tar.gz

Extract the archive from /tmp to the current directory.
$ tar xzf /tmp/20201228-02\:28.tar.gz


TARSNAP

Even if I backup and expire archives with a script, I still want to
understand how to use tarsnap by hand.

Dry-run
$ tarsnap --dry-run --humanize-numbers -cf temp .
$ tarsnap -cf project-$(date +%Y%m%d-%H:%M) --dry-run .

Backup, create an archive. Remember the PWD where you create the
archive for later when you need to restore it.
# tarsnap -cf instructions-$(date +%Y%m%d-%H:%M) instructions

Expire, delete archives no longer needed, to free up space in the
tarsnap account.
# tarsnap -df instructions-20201229-08:41

Print statistics on how much data an archive or all archives with this
key are taking on the tarsnap servers.
# tarsnap --print-stats

List all archives created.
# tarsnap --list-archives

List members of an archive.
# tarsnap -tf instructions-20201229-09:25

Restore, extract an archive, when cd-ed to the same directory where
the archive was created.
# tarsnap -xf instructions-20201229-08:49

Read the contents of an archive to standard output, useful for piping
into tools such as dd.
# tarsnap -rf instructions


Create an archive but exclude a large subdirectory within it.

Perform a dry run and create an archive titled home and todays date,
exclude any subdirectory named cvs65, start in the root directory /, and
archive everything in the home directory.
# tarsnap --dry-run -cf home-$(date +%Y%m%d-%H:%M) --exclude */cvs65/* -C / home

Same as above, but specify the directory to exclude as an absolute path,
/home/kevin/cvs65.
# tarsnap --dry-run -cf home-$(date +%Y%m%d-%H:%M) --exclude /home/kevin/cvs65 -C / home

And then to actually make the archive:
# tarsnap -cf home-$(date +%Y%m%d-%H:%M) --exclude */cvs65/* -C / home

Create an archive of just the files included on the command line.
# tarsnap -cf homebackup --include "only-these-*"

Create an archive but exclude all files listed in the named file.
# tarsnap -cf homebackup -X exclusions.txt /home

Create an archive but only include the files listed in the named file.
Note you do not need to specify the directory to backup when using an
inclusions file (no need to specify /home to backup).
# tarsnap -cf homebackup -T inclusions.txt



Backing up from a filesystem snapshot

When creating an archive from a filesystem snapshot, tarsnap can fail to
recognize a file has been modified and needs to be backed up unless you
tell tarsnap to base its modification time checks on a specific file
timestamp taken shortly before the snapshot.

To do this, first make a file in the directory to be snapshotted. Then
take the snapshot, then mount the snapshot and tarsnap it, then unmount
the snapshot and delete it if you wish.

First create the file for the snaptime option to tarsnap.
$ touch snaptime

Then take a snapshot (in ZFS for example) and mount it to /mnt or
auto-mount it with ZFS.

Then take the backup.
# tarsnap --snaptime /home/kevin/snaptime -cf home /mnt

Then unmount the snapshot and delete it if you wish.


Backup /etc but have it auto-restore to /oldetc to avoid overwriting
files on the new system by mistake. -s uses sed-like regular expressions
and query-replace syntax.
# tarsnap -s /etc/oldetc/ -cf etcbackup /etc

If you need to create the archive with a restore location multiple
directories deep, use a comma instead of a slash as the replace
delimiter.
# tarsnap -s ,etc,/var/tarsnap/dir, -cf etcbackup /etc


Rename an existing archive

Tarsnap does not let you rename archives. But you can create a new
archive with the contents of an old one and then delete the old one.

Create an archive named backup-instructions with the same date as the
original 'instrucitons' archive.
# tarsnap -cf backup-instructions-20201229-09:25 @@instructions-20201229-09:25

The old archive can be deleted, thought it hardly takes up any space.


Create a new archive of just a subdirectory of an existing archive of a
larger directory tree.
# tarsnap -cf just-instructions-20210101-09:57 --include \
	'home/kevin/instructions' @@home-20210101-09:57

Say you had backed up /var/www and now want an archive from that one
of just the files named wp-config.php, from each Wordpress site, in
each of their full directory paths, as in:
/var/www/site1/wp-config.php
/var/www/site2/wp-config.php

Here is how to do it.
# tarsnap -cf wp-config-20210101-09:57 --include '*wp-config.php' \
	@@allsites-20210101-09:57

Do not add an asterisk * after wp-config.php unless you also want to
capture files such as wp-config.php-BustedAgainYouIdiot.

If the fileset you want to sub-archive is large or diverse enough, use
--exclude instead.


initial setup

Copy example tarsnap.conf to /etc, generate tarsnap key.
# cp /usr/local/share/examples/tarsnap/tarsnap.conf /etc

Apply the following changes to tarsnap.conf:
 - Change keyfile in /root from tarsnap.key to 9.k9w.org.tarsnapkey.
 - Uncomment humanize-numbers.

Generate the tarsnap key for this server. Tarsnap-keygen needs the
keyfile specified on the command line even if it is already set in
/etc/tarsnap.conf.
# tarsnap-keygen --keyfile /root/9.k9w.org.tarsnapkey --user \
	kevin@k9w.org --machine 9.k9w.org

Backup the tarsnap key to a safe place, a different box on a different
network from this server: my local laptop (which also needs to be backed
up).

Copy the key from /root to /home/$username.
# cp /root/9.k9w.org /home/kevin

Change the owner from root to $username.
# chown kevin:wheel 9.k9w.org

On my local laptop, cd to backed-up-tarsnap-keys and SFTP to the server.
Then copy copy the key down to my laptop.

I am responsible to backup any such tarsnap keys from my laptop either
using a separate tarsnap key just for my laptop, or using an entirely
different backup program and remote storage location.

I considered using that key as a regular user. But it is not secure and
not default. See the comments in ~/.tarsnaprc for details.

Now that I have backed up the key to my laptop, I delete the copy from ~
and just leave the original in /root.


started 12-21-20

Setup:

Copy the example config file into production.
# cp /usr/local/share/examples/tarsnap/tarsnap.conf /etc

Generate /root/tarsnap.key, the default key name in tarsnap.conf, for
this machine to my tarsnap.com user account.
# tarsnap-keygen -user kevin@k9w.org -machine openbsd-laptop

Make a script /root/tarsnap-backup.sh with the following

#!/bin/sh

/usr/local/bin/tarsnap -f "o-laptop-$(date +%Y%m%d-%H-)" \
	-T files-to-backup

