head	2.11;
access;
symbols
	snare-drum:2.4;
locks; strict;
comment	@# @;


2.11
date	2019.08.14.08.35.44;	author kevin;	state Exp;
branches;
next	2.10;

2.10
date	2019.08.14.08.35.07;	author kevin;	state Exp;
branches;
next	2.9;

2.9
date	2019.08.14.08.32.53;	author kevin;	state Exp;
branches;
next	2.8;

2.8
date	2019.08.14.08.30.24;	author kevin;	state Exp;
branches;
next	2.7;

2.7
date	2019.08.14.08.28.39;	author kevin;	state Exp;
branches;
next	2.6;

2.6
date	2019.08.14.08.22.38;	author kevin;	state Exp;
branches;
next	2.5;

2.5
date	2019.08.14.08.17.27;	author kevin;	state Exp;
branches;
next	2.4;

2.4
date	2019.08.14.07.54.18;	author kevin;	state Exp;
branches;
next	2.3;

2.3
date	2019.08.14.07.47.15;	author kevin;	state cymbol;
branches;
next	2.2;

2.2
date	2019.08.14.07.30.54;	author kevin;	state current;
branches;
next	2.1;

2.1
date	2019.08.14.07.25.36;	author kevin;	state Exp;
branches;
next	1.6;

1.6
date	2019.08.10.06.31.46;	author kevin;	state Exp;
branches;
next	1.5;

1.5
date	2019.08.10.06.25.32;	author kevin;	state Exp;
branches;
next	1.4;

1.4
date	2019.07.30.00.03.34;	author kevin;	state Exp;
branches;
next	1.3;

1.3
date	2019.07.29.15.10.31;	author kevin;	state Exp;
branches;
next	1.2;

1.2
date	2019.07.29.14.54.37;	author kevin;	state Exp;
branches;
next	1.1;

1.1
date	2019.07.26.00.50.08;	author kevin;	state Exp;
branches;
next	;


desc
@set X to random number and print it to standard output
@


2.11
log
@removed reference to rev2.9
@
text
@#!/bin/sh

# From : ' to ' is a multi-line comment.
: '
	$Id: test.sh,v 2.10 2019/08/14 08:35:07 kevin Exp kevin $

X=$((RANDOM % 2048))
echo $X

'


# If X is less than zero

if [ "$X" -lt "0" ]; then
	echo "X is less than zero"
fi


# If X is greater than zero

if [ "$X" -gt "0" ]; then
	echo "X is more than zero"
fi


# If X is less than or equal to zero

[ "$X" -le "0" ] && \
	echo "X is less than or equal to zero"


# If X is greater than or equal to zero

[ "$X" -ge "0" ] && \
	echo "X is more than or equal to zero"


# If X is exactly equal to zero

[ "$X" = "0" ] && \
	echo "X is the string or number \"0\""


# True if X equals "hello"

[ "$X" = "hello" ] && \
	echo "X matches the string \"hello\""


# True if X does not equal exactly "hello"

[ "$X" != "hello" ] && \
	echo "X is not the string \"hello\""


# True if X has a value that is longer than zero characters

[ -n "$X" ] && \
	echo "X is of nonzero length"


# True if X matches a regular file on the local filesystem

[ -f "$X" ] && \
	echo "X is the path of a real file" || \
	echo "No such file: $X"


# True if X is a file and is executable

[ -x "$X" ] && \
	echo "X is the path of an executable file"


# True if X is a file that has been modified more recently than /etc/passwd

[ "$X" -nt "/etc/passwd" ] && \
	echo "X is a file which is newer than /etc/passwd"

@


2.10
log
@added Id
@
text
@a9 2
This should be rev 2.9 it was pulled from 1.3.

@


2.9
log
@pulled from 1.3 to be 2.9
@
text
@d5 2
@


2.8
log
@changed id to Id
@
text
@d3 4
a6 1
#	$Id: test.sh,v 2.8 2019/08/14 08:30:24 kevin Exp kevin $
d8 1
a8 1
X=0
d10 71
a80 7
while [ -n "$X" ]; do
  echo "Enter some text (RETURN to quit)"
  read X
  if [ -n "$X" ]; then
    echo "You said: $X"
  fi
done
@


2.7
log
@checked out from 1.2, pasted from tutorial, saved as 2.7
@
text
@d3 1
a3 1
#	$id$
@


2.6
log
@
@
text
@d3 1
a3 1
# $Id: test.sh,v 2.6 2019/08/14 08:22:38 kevin Exp kevin $ 
d6 1
d8 5
a12 6
	echo "Enter some text (RETURN to quit)"
	read X
	if [ -n "$X" ]; then
		echo "You said: $X"
	fi

a13 1

@


2.5
log
@exit on empty string without printing "you said"
@
text
@@


2.4
log
@second symbol
@
text
@d3 1
a3 1
#	$Id: test.sh,v 2.4 2019/08/14 07:54:18 kevin Exp kevin $
d6 6
a12 4
while [ -n "$X" ]; do
        echo "Enter some text (RETURN to quit)"
        read X
        echo "You said: $X"
a13 2

echo "This is on OpenBSD-current."
@


2.3
log
@add first symbol
@
text
@d13 2
@


2.2
log
@forgot to add a whole seciton of the script from then tutorial
@
text
@d5 1
a5 1
echo -en "Please guess the magic number: "
d7 5
a11 16
read X

echo $X | grep "[^0-9"] > /dev/null 2>&1

if [ $? -eq "0" ]; then
	# If the grep found something other than 0-9, we can safely do a
	# test on it.
	echo "Sorry, wanted a number"
else
	# The grep found only 0-9; so it's an integer.
	# We can safely do a test on it.

	if [ $X -eq "7" ]; then 
		echo "You entered the magic number!"
	fi
fi
@


2.1
log
@new version handles non-integer values for X better
@
text
@d14 4
@


1.6
log
@try to expand RCS keyword Id without #!/bin/sh
if [ "$X" -lt "0" ]
then
  echo "X is less than zero"
fi
if [ "$X" -gt "0" ]; then
  echo "X is more than zero"
fi
[ "$X" -le "0" ] && \
      echo "X is less than or equal to  zero"
[ "$X" -ge "0" ] && \
      echo "X is more than or equal to zero"
[ "$X" = "0" ] && \
      echo "X is the string or number \"0\""
[ "$X" = "hello" ] && \
      echo "X matches the string \"hello\""
[ "$X" != "hello" ] && \
      echo "X is not the string \"hello\""
[ -n "$X" ] && \
      echo "X is of nonzero length"
[ -f "$X" ] && \
      echo "X is the path of a real file" || \
      echo "No such file: $X"
[ -x "$X" ] && \
      echo "X is the path of an executable file"
[ "$X" -nt "/etc/passwd" ] && \
      echo "X is a file which is newer than /etc/passwd"

@
text
@d5 1
a5 1
# From : ' to ' is a multi-line comment.
d7 1
a7 1
: '
d9 1
a9 1
$ X=-1 or X=/etc/ssh/sshd_config && export X
d11 3
a13 3
Does not work properly: -1 is interpreted as a command line option to
export. Instead, combine the export and veriable assignment into one
command like this:
d15 3
a17 18
$ export X=/etc/hostname.iwm0

This script still throws errors when the value for X contains any
characters, or whitespace, enterpretedly specially by the shell. I
will lear how to fix it later.

I tried it out on bash and it throws the same errors. This script is
simply badly written from https://shellscript.sh/test.html

It is best to just move on.

'


# If X is less than zero

if [ "$X" -lt "0" ]; then
	echo "X is less than zero"
a18 62


# If X is greater than zero

if [ "$X" -gt "0" ]; then
	echo "X is more than zero"
fi


# If X is less than or equal to zero

[ "$X" -le "0" ] && \
	echo "X is less than or equal to zero"


# If X is greater than or equal to zero

[ "$X" -ge "0" ] && \
	echo "X is more than or equal to zero"


# If X is exactly equal to zero

[ "$X" = "0" ] && \
	echo "X is the string or number \"0\""


# True if X equals "hello"

[ "$X" = "hello" ] && \
	echo "X matches the string \"hello\""


# True if X does not equal exactly "hello"

[ "$X" != "hello" ] && \
	echo "X is not the string \"hello\""


# True if X has a value that is longer than zero characters

[ -n "$X" ] && \
	echo "X is of nonzero length"


# True if X matches a regular file on the local filesystem

[ -f "$X" ] && \
	echo "X is the path of a real file" || \
	echo "No such file: $X"


# True if X is a file and is executable

[ -x "$X" ] && \
	echo "X is the path of an executable file"


# True if X is a file that has been modified more recently than /etc/passwd

[ "$X" -nt "/etc/passwd" ] && \
	echo "X is a file which is newer than /etc/passwd"
@


1.5
log
@errors happen on bash too; added RCS keyword Id
@
text
@d3 1
a3 1
#	$Id: test.sh,v 1.5 2019/08/10 06:25:32 kevin Exp kevin $
@


1.4
log
@documented how to set X to a value
@
text
@d3 2
d20 5
@


1.3
log
@corrected spelling on ture to true
@
text
@d4 1
d6 13
a18 2
X=$((RANDOM % 2048))
echo $X
@


1.2
log
@added test cases
@
text
@d67 1
a67 1
# Ture if X is a file and is executable
@


1.1
log
@Initial revision
@
text
@d3 2
d7 71
@
